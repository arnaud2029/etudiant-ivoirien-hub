import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const SYSTEM_PROMPT = `Tu es Kora, l'assistant virtuel d'√âtudiant Ivoirien, une plateforme √©ducative en ligne d√©di√©e aux √©tudiants ivoiriens.

INFORMATIONS SUR √âTUDIANT IVOIRIEN :
- Plateforme √©ducative gratuite pour les √©tudiants ivoiriens
- Propose des cours pour tous les niveaux : Primaire, Secondaire, Universit√©
- Mati√®res disponibles : Math√©matiques, Fran√ßais, Sciences, Histoire-G√©o, Anglais, Philosophie, etc.
- Fonctionnalit√©s : cours vid√©o, documents PDF, exercices interactifs, quiz
- Inscription gratuite avec email ou compte Gmail
- Biblioth√®que de ressources avec syst√®me de filtrage par niveau et mati√®re
- Possibilit√© de devenir auteur et proposer des cours
- Support disponible via WhatsApp pour une aide personnalis√©e

TES RESPONSABILIT√âS :
- Aider les utilisateurs √† naviguer sur la plateforme
- Expliquer le processus d'inscription (gratuit, via email ou Gmail)
- Pr√©senter les cours et mati√®res disponibles
- Guider vers les bonnes ressources selon le niveau d'√©tude
- Expliquer comment utiliser la biblioth√®que et les exercices
- Orienter vers WhatsApp pour un support humain si n√©cessaire
- Encourager l'inscription pour acc√©der aux cours complets

STYLE DE COMMUNICATION :
- R√©ponds en fran√ßais
- Sois bienveillant, encourageant et professionnel
- Utilise des √©mojis avec mod√©ration
- Reste concis mais informatif
- Propose toujours des actions concr√®tes (s'inscrire, consulter un cours, etc.)
- Si tu ne connais pas une information sp√©cifique, oriente vers le support WhatsApp

Si on te demande des informations que tu ne poss√®des pas sur la plateforme, propose de contacter le support via WhatsApp pour obtenir une r√©ponse personnalis√©e.`;

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { message, conversationHistory = [] } = await req.json();

    if (!message) {
      return new Response(JSON.stringify({ error: 'Message requis' }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openAIApiKey) {
      console.error('OPENAI_API_KEY not found');
      return new Response(JSON.stringify({ error: 'Configuration manquante' }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Pr√©parer les messages pour OpenAI
    const messages = [
      { role: 'system', content: SYSTEM_PROMPT },
      ...conversationHistory.slice(-10), // Garder les 10 derniers messages pour le contexte
      { role: 'user', content: message }
    ];

    console.log('Sending request to OpenAI with message:', message);

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: messages,
        max_tokens: 500,
        temperature: 0.7,
      }),
    });

    if (!response.ok) {
      console.error('OpenAI API error:', response.status, await response.text());
      return new Response(JSON.stringify({ error: 'Erreur du service IA' }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const data = await response.json();
    const aiResponse = data.choices[0]?.message?.content;

    if (!aiResponse) {
      console.error('No response from OpenAI');
      return new Response(JSON.stringify({ error: 'Pas de r√©ponse g√©n√©r√©e' }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    console.log('AI response generated successfully');

    return new Response(JSON.stringify({ 
      response: aiResponse,
      usage: data.usage 
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in chatbot-ai function:', error);
    return new Response(JSON.stringify({ 
      error: 'Erreur interne du serveur',
      fallback: "D√©sol√©, je rencontre un probl√®me technique. Tu peux me reposer ta question ou contacter notre support via WhatsApp pour une aide imm√©diate ! üí¨"
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});